import re

from random import choice

from datetime import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import decode_payload, create_deep_link

from app.game.dao import UserDAO, PromocodeDAO, UsesOfPromoDAO, BonusDAO
from app.game.schemas import UserModel, PromocodeModel, UsesOfPromoModel
from app.bot.keyboard.kbs import reply_keyboard
from app.database import connection

from sqlalchemy.ext.asyncio import AsyncSession



router = Router()



@router.message(CommandStart())
@connection()
async def start(message: Message, session: AsyncSession, **kwargs):
    welcome_text = (
        '–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è!'
    )

    try:
        # –ø–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        match_res = re.match(r'^\/start[^ ]* (.*)', message.text)
        if match_res is None:
            await UserDAO.add_or_update_user(session=session, user_info=message.from_user, length=0)

            return await message.answer(welcome_text, reply_markup=reply_keyboard())


        # –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        encoded_invite = match_res[1]
        try:
            invited_user = decode_payload(encoded_invite)
        except Exception as e:
            return await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –µ–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /start')                
        

        # –ø–æ–∏—Å–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_invited_info = await UserDAO.find_user(session=session, user_id=invited_user)
        if user_invited_info is None:
            return await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –µ–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ /start')                
            

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await UserDAO.add_or_update_user(session=session, user_info=message.from_user, length=5)
        await UserDAO.add_length_cactus(session=session, user_id=invited_user, length=25)

        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        return await message.answer(welcome_text, reply_markup=reply_keyboard())
    except Exception as e:
        print(e)

        return await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ <a href=\'t.me/kickspink\'>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</a>!')



@router.message(Command('grow'))
@connection()
async def grow_cactuc(message: Message, session: AsyncSession, **kwargs):
    try: 
        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserDAO.add_or_update_user(session=session, user_info=message.from_user, length=0)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø –ø–æ–ø—ã—Ç–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ–∂–∞—Ç–∏–µ
        if (user.bonus_attempts == 0) and (user.last_grow == datetime.now().date()):
            return await message.answer(
                f'<a href=\'t.me/{user.username}\'>{user.first_name}</a>, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ üò¢. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üåÖ\n'
                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–π –ø–∏–ø–∏—Å—ã —Ä–∞–≤–Ω–∞ <b>{user.length}—Å–º</b> üìè\n'
                f'–í–∞—à grow streak <b>{user.grow_streak}</b> ‚ú®', disable_web_page_preview=True
            )
    

        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–∞–Ω–µ –∏—Å–∫–ª—é—á–∞—è –Ω–æ–ª—å
        random_length = choice([i for i in range(-5, 10) if i not in [0]])
        user, bonuses = await UserDAO.add_length_cactus(session=session, user_id=user.user_id, length=random_length)

        bonus_text = ''
        if bonuses.bonus_cm > 0:
            bonus_text = f'–ù–∞—á–∏—Å–ª–µ–Ω–Ω–æ <b>{bonuses.bonus_cm} –±–æ–Ω—É—Å–Ω—ã—Ö —Å–º üí´</b>'

        print(bonus_text)

        if random_length > 0:
            return await message.answer(
                f'<a href=\'t.me/{user.username}\'>{user.first_name}</a>, –≤–∞—à–∞ –ø–∏–ø–∏—Å–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ <b>{random_length}—Å–º üòä</b>. {bonus_text}\n'
                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–π –ø–∏–ø–∏—Å—ã —Ä–∞–≤–Ω–∞ <b>{user.length}—Å–º</b> üìè\n'
                f'–û—Å—Ç–∞–ª–æ—Å—å <b>{user.bonus_attempts}</b> –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /grow üåø\n'
                f'–í–∞—à grow streak <b>{user.grow_streak}</b> ‚ú®', disable_web_page_preview=True
            )
        else:
            return await message.answer(
                f'<a href=\'t.me/{user.username}\'>{user.first_name}</a>, –≤–∞—à–∞ –ø–∏–ø–∏—Å–∞ —Å–æ–∫—Ä–∞—Ç–∏–ª–∞—Å—å –Ω–∞ <b>{random_length}—Å–º üòî</b>. {bonus_text}\n'
                f'–î–ª–∏–Ω–∞ –≤–∞—à–µ–π –ø–∏–ø–∏—Å—ã —Ä–∞–≤–Ω–∞ <b>{user.length}—Å–º</b> üìè\n'
                f'–û—Å—Ç–∞–ª–æ—Å—å <b>{user.bonus_attempts}</b> –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /grow üåø\n'
                f'–í–∞—à grow streak <b>{user.grow_streak}</b> ‚ú®', disable_web_page_preview=True
            )
    except Exception as e:
        print(e)

        return await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ <a href=\'t.me/kickspink\'>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</a>!')



@router.message(Command('top'))
@connection()
async def top_users(message: Message, session: AsyncSession, **kwargs):
    try:
        ranked_users = await UserDAO.get_top_users(session=session, user_id=message.from_user.id)

        list_top_users = '–¢–æ–ø 100 –ø–∏–ø–∏—Å –º–∏—Ä–∞:\n'
        for user in ranked_users:
            list_top_users += f'{user['rank']}. {user['first_name']}: {user['length']}—Å–º\n'
        
        return await message.answer(list_top_users)
    except Exception as e:
        print(e)

        return await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ <a href=\'t.me/kickspink\'>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</a>!')



@router.message(Command('bonuses'))
async def bonuses(message: Message, session: AsyncSession, **kwargs):
    bonuses = await BonusDAO.get_bonuses(session=session)
    return print(bonuses)
